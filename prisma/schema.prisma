// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id 
  email         String    @unique
  name          String    @unique @default("None")
  habits        Habit[]
  createdAt     DateTime  @default(now())
  emailVerified Boolean   @default(false)
  image         String?
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  tasks         Task[]
  //taskTabs      TaskTab[]

  @@map("user")
}

model Task {
  id Int @id @default(autoincrement())
  title String
  isActive Boolean @default(true)
  description String?
  dueDate DateTime @default(now())
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  //taskTabId Int
  //taskTab TaskTab @relation(fields: [taskTabId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("task")
}
// Для добавления функционала вкладок задач
// model TaskTab {
//   id Int @id @default(autoincrement())
//   title String
//   userId String
//   tasks Task[]
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
// }



model Habit {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  frequency   String // "daily", "weekly", "monthly"
  targetCount Int // целевое количество выполнений
  isActive    Boolean @default(true)
  color       String? // цвет для UI
  icon        String? // иконка привычки

  // Связь с пользователем
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Дополнительные отношения (если нужно)
  completions HabitCompletion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Модель для отслеживания выполнения привычек

model HabitCompletion {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  completed Boolean  @default(true)

  habitId Int
  habit   Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}


